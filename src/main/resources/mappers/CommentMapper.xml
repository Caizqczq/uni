<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unilife.mapper.CommentMapper">

    <resultMap id="CommentEntityResultMap" type="com.unilife.model.entity.Comment">
        <id property="id" column="c_id"/>
        <result property="content" column="c_content"/>
        <result property="userId" column="c_user_id"/>
        <result property="postId" column="c_post_id"/>
        <result property="parentCommentId" column="c_parent_comment_id"/>
        <result property="createdAt" column="c_created_at"/>
    </resultMap>

    <resultMap id="CommentResponseDtoResultMap" type="com.unilife.model.dto.CommentResponseDto">
        <id property="id" column="c_id"/>
        <result property="content" column="c_content"/>
        <result property="authorUsername" column="u_username"/>
        <result property="authorNickname" column="u_nickname"/>
        <result property="authorAvatarUrl" column="u_avatar_url"/>
        <result property="postId" column="c_post_id"/>
        <result property="parentCommentId" column="c_parent_comment_id"/>
        <result property="createdAt" column="c_created_at"/>
    </resultMap>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (content, user_id, post_id, parent_comment_id, created_at)
        VALUES (#{content}, #{userId}, #{postId}, #{parentCommentId}, #{createdAt})
    </insert>

    <select id="findById" resultMap="CommentEntityResultMap">
        SELECT id as c_id, content as c_content, user_id as c_user_id, post_id as c_post_id,
               parent_comment_id as c_parent_comment_id, created_at as c_created_at
        FROM comments
        WHERE id = #{id}
    </select>

    <select id="findByIdWithDetails" resultMap="CommentResponseDtoResultMap">
        SELECT
            c.id as c_id, c.content as c_content, c.post_id as c_post_id,
            c.parent_comment_id as c_parent_comment_id, c.created_at as c_created_at,
            u.username as u_username, u.nickname as u_nickname, u.avatar_url as u_avatar_url
        FROM comments c
        JOIN users u ON c.user_id = u.id
        WHERE c.id = #{id}
    </select>

    <sql id="selectCommentDetails">
        SELECT
            c.id as c_id, c.content as c_content, c.post_id as c_post_id,
            c.parent_comment_id as c_parent_comment_id, c.created_at as c_created_at,
            u.username as u_username, u.nickname as u_nickname, u.avatar_url as u_avatar_url
        FROM comments c
        JOIN users u ON c.user_id = u.id
    </sql>

    <select id="findByPostIdWithDetails" resultMap="CommentResponseDtoResultMap">
        <include refid="selectCommentDetails"/>
        WHERE c.post_id = #{postId}
        ORDER BY c.created_at ASC <!-- Usually oldest comments first, or based on preference -->
    </select>

    <select id="findByParentCommentIdWithDetails" resultMap="CommentResponseDtoResultMap">
        <include refid="selectCommentDetails"/>
        WHERE c.parent_comment_id = #{parentCommentId}
        ORDER BY c.created_at ASC
    </select>

    <update id="update">
        UPDATE comments
        <set>
            <if test="content != null">content = #{content},</if>
            <!-- Other fields like userId, postId, parentCommentId are usually not updatable -->
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM comments WHERE id = #{id}
    </delete>

    <delete id="deleteByPostId">
        DELETE FROM comments WHERE post_id = #{postId}
    </delete>

    <delete id="deleteByUserId">
        DELETE FROM comments WHERE user_id = #{userId}
    </delete>

</mapper>
